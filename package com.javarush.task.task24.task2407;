package com.javarush.task.task24.task2407;

/*

Реализация интерфейса используя локальный класс
В классе Cat реализуй логику метода toSayable, которая описана в джавадоке.

Требования:
1. В классе Cat должен быть реализован публичный метод toSayable с одним параметром типа int.
2. Метод toSayable должен возвращать объект типа Sayable.
3. Если полученный параметр меньше 1, метод say() должен вернуть строку формата: "name спит.", где name - имя текущего кота.
4. Если полученный параметр больше либо равен 1, метод say() должен вернуть строку формата: "name говорит мяяяу!",
где name - имя текущего кота, а количество букв "я" в слове "мяяяу" равно полученному параметру.
5. Программа должна выводить данные на экран.В работе вам иногда будет нужно закастить класс к какому-нибудь интерфейсу (тут Sayable),
который не реализован в текущем классе
 */
public class Cat implements Pet {
    private String name;

    public Cat(String name) {
        this.name = name;
    }

    /**
     * Это - механизм адаптирования к другому интерфейсу - Sayable
     * Внутри метода toSayable создайте class CatPet, реализующий интерфейс Sayable
     * Логика метода say:
     * Если i <= 0, то вывести на экран, что кот спит. Пример, "Васька спит."'
     * Иначе вывести фразу: "имя_кота говорит мяу!". Пример для i=3, "Васька говорит мяяяу!"
     * <p/>
     * <b>Пример вывода:</b>
     * Мурзик спит.
     * Васька говорит мяяу!
     * Кошка говорит мяяяяяу!
     * Мышь пищит.
     * Томас говорит мяу!
     * <p/>
     *
     * @param i количество букв 'я' в слове мяу
     * @return экземпляр класса CatPet
     */
    public Sayable toSayable(final int i) {

        class CatPet implements Sayable {

            @Override
            public String say() {
                if (i < 1)
                    return name +" спит.";
                else {
                    StringBuffer я = new StringBuffer();
                    for (int k = 0; k < i; k++)
                        я.append("я");

                    return Cat.this.name + " говорит м" + я + "у!";
                }
            }
        }
        return new CatPet ();
    }
}
_____________________________________________________________________________________________________________________________________
package com.javarush.task.task24.task2407;

import java.util.List;

/* 
Реализация интерфейса используя локальный класс
*/
public class Solution {
    public static void main(String[] args) {
        List<Pet> pet = Util.getPets();
        List<Sayable> pets = Util.convertPetToSayable(pet);
        Util.printDialog(pets);
    }
}
_______________________________________________________________________________________________________________________________________
package com.javarush.task.task24.task2407;

/*
обратите внимание, как именно Mouse отличается от Cat
Этот класс - привычный для вас.
*/
public class Mouse implements Pet, Sayable {
    @Override
    public Sayable toSayable(int i) {
        return this;
    }

    @Override
    public String say() {
        return "Мышь пищит.";
    }
}
_____________________________________________________________________________________________________________________________________
package com.javarush.task.task24.task2407;

public interface Pet {
    public Sayable toSayable(int i);
}
______________________________________________________________________________________________________________________________________
package com.javarush.task.task24.task2407;

public interface Sayable {
    String say();
}
